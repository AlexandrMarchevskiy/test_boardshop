{"name": "test_buy_product[2]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: В корзине 2 продуктов: ['Мужские Зауженные Джинсы Element E02', 'Мужское Худи Element Forces'] , на сумму: 10338 Р.  \n Не в корзине ['Мужские Кожаные Ботинки Topaz C3']", "trace": "self = <pages.cart_page.Cart_page object at 0x0000019CCDD15C30>\ngetters = [('//a[@href=\"/product/z1pnb1-elf1-504-muzhskie-zauzhennye-dzhinsy-element-e02\"]', 'Мужские Зауженные Джинсы Element E...инки Topaz C3'), ('//a[@href=\"/product/w1hob1-elp1-967-muzhskoe-hudi-element-forces\"]', 'Мужское Худи Element Forces')]\n\n    def cart_check(self, getters):\n        with allure.step('Cart check'):\n            Logger.add_start_step(method='cart_check')\n            in_cart = []\n            not_in_cart = []\n            for product in getters:\n                try:\n                    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, product[0])))\n                    in_cart.append(product[1])\n                except:\n                    not_in_cart.append(product[1])\n            if len(not_in_cart) > 0:\n                try:\n>                   raise NoSuchElementException(f'В корзине {len(in_cart)} продуктов: {in_cart} , на сумму: {self.get_total_price(self.total_price).text}.  \\n Не в корзине {not_in_cart}')\n\npages\\cart_page.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.cart_page.Cart_page object at 0x0000019CCDD15C30>, locator = '//span[@class=\"js-allproductstotal-text\"]'\n\n    def get_total_price(self, locator):\n>       return self.driver.find_element(By.XPATH, locator)\n\npages\\cart_page.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"861432a8765ff1b9410f50cdf8483bac\")>, by = 'xpath', value = '//span[@class=\"js-allproductstotal-text\"]'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\nD:\\main_project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:861: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"861432a8765ff1b9410f50cdf8483bac\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//span[@class=\"js-allproductstotal-text\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\main_project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019CCDD167D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77637BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77637B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[@class=\"js-allproductstotal-text\"]\"}\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0032F243]\nE       \t(No symbol) [0x002B7FD1]\nE       \t(No symbol) [0x001AD04D]\nE       \t(No symbol) [0x001DC0B0]\nE       \t(No symbol) [0x001DC22B]\nE       \t(No symbol) [0x0020E612]\nE       \t(No symbol) [0x001F85D4]\nE       \t(No symbol) [0x0020C9EB]\nE       \t(No symbol) [0x001F8386]\nE       \t(No symbol) [0x001D163C]\nE       \t(No symbol) [0x001D269D]\nE       \tGetHandleVerifier [0x005C9A22+2655074]\nE       \tGetHandleVerifier [0x005BCA24+2601828]\nE       \tGetHandleVerifier [0x003D8C0A+619850]\nE       \tGetHandleVerifier [0x003D7830+614768]\nE       \t(No symbol) [0x002C05FC]\nE       \t(No symbol) [0x002C5968]\nE       \t(No symbol) [0x002C5A55]\nE       \t(No symbol) [0x002D051B]\nE       \tBaseThreadInitThunk [0x76BC00F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77637BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77637B8E+238]\n\nD:\\main_project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nset_group = None, execution_number = 2\n\n    @pytest.mark.parametrize('execution_number', range(1, 6))\n    def test_buy_product(set_group, execution_number):\n        options = webdriver.ChromeOptions()\n        options.add_argument('log-level=3')  # отключение предупреждения ошибки рукопожатия\n    \n        s = Service('D:\\\\test_shop_project\\\\chromedriver.exe')\n        driver = webdriver.Chrome(service=s, options=options)\n    \n        mp = Main_page(driver)\n        time.sleep(2)\n        mp.select_brand_element()\n    \n        bp = Brand_page(driver)\n        time.sleep(2)\n        bp.select_cats()\n        time.sleep(2)\n        bp.select_products()\n        time.sleep(2)\n    \n        cp = Cart_page(driver)\n>       cp.info_cart()\n\ntests\\test_buy_products.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\cart_page.py:54: in info_cart\n    self.cart_check(products)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.cart_page.Cart_page object at 0x0000019CCDD15C30>\ngetters = [('//a[@href=\"/product/z1pnb1-elf1-504-muzhskie-zauzhennye-dzhinsy-element-e02\"]', 'Мужские Зауженные Джинсы Element E...инки Topaz C3'), ('//a[@href=\"/product/w1hob1-elp1-967-muzhskoe-hudi-element-forces\"]', 'Мужское Худи Element Forces')]\n\n    def cart_check(self, getters):\n        with allure.step('Cart check'):\n            Logger.add_start_step(method='cart_check')\n            in_cart = []\n            not_in_cart = []\n            for product in getters:\n                try:\n                    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, product[0])))\n                    in_cart.append(product[1])\n                except:\n                    not_in_cart.append(product[1])\n            if len(not_in_cart) > 0:\n                try:\n                    raise NoSuchElementException(f'В корзине {len(in_cart)} продуктов: {in_cart} , на сумму: {self.get_total_price(self.total_price).text}.  \\n Не в корзине {not_in_cart}')\n                except:\n>                   raise NoSuchElementException(f'В корзине {len(in_cart)} продуктов: {in_cart} , на сумму: {self.get_total_price(self.price_1_order).text}.  \\n Не в корзине {not_in_cart}')\nE                   selenium.common.exceptions.NoSuchElementException: Message: В корзине 2 продуктов: ['Мужские Зауженные Джинсы Element E02', 'Мужское Худи Element Forces'] , на сумму: 10338 Р.  \nE                    Не в корзине ['Мужские Кожаные Ботинки Topaz C3']\n\npages\\cart_page.py:46: NoSuchElementException"}, "steps": [{"name": "Select brand element", "status": "passed", "start": 1671996309819, "stop": 1671996318506}, {"name": "Select products", "status": "passed", "start": 1671996332940, "stop": 1671996360551}, {"name": "Cart check", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: В корзине 2 продуктов: ['Мужские Зауженные Джинсы Element E02', 'Мужское Худи Element Forces'] , на сумму: 10338 Р.  \n Не в корзине ['Мужские Кожаные Ботинки Topaz C3']\n\n", "trace": "  File \"D:\\test_shop_project\\pages\\cart_page.py\", line 46, in cart_check\n    raise NoSuchElementException(f'В корзине {len(in_cart)} продуктов: {in_cart} , на сумму: {self.get_total_price(self.price_1_order).text}.  \\n Не в корзине {not_in_cart}')\n"}, "start": 1671996362564, "stop": 1671996372949}], "attachments": [{"name": "stdout", "source": "2f0dd763-9f13-4a10-a5c6-af5a4d7e9204-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "execution_number", "value": "2"}], "start": 1671996306538, "stop": 1671996372980, "uuid": "2abd7d71-5713-4e8f-b4c4-2bd1761eaa39", "historyId": "b03cdc390a7fdf50226e54008c1add14", "testCaseId": "56e2ac1a7e9e5b7a8132155cac025e75", "fullName": "tests.test_buy_products#test_buy_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_products"}, {"name": "host", "value": "DESKTOP-7U61FLN"}, {"name": "thread", "value": "14440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_products"}]}